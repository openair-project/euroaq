[
    {
        "name": "access_mode",
        "value": "automatic",
        "description": "Access mode of the database (AUTOMATIC, READ_ONLY or READ_WRITE)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "allocator_background_threads",
        "value": "false",
        "description": "Whether to enable the allocator background thread.",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "allocator_bulk_deallocation_flush_threshold",
        "value": "512.0 MiB",
        "description": "If a bulk deallocation larger than this occurs, flush outstanding allocations.",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "allocator_flush_threshold",
        "value": "128.0 MiB",
        "description": "Peak allocation threshold at which to flush the allocator after completing a task.",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "allow_community_extensions",
        "value": "true",
        "description": "Allow to load community built extensions",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "allow_extensions_metadata_mismatch",
        "value": "false",
        "description": "Allow to load extensions with not compatible metadata",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "allow_persistent_secrets",
        "value": "true",
        "description": "Allow the creation of persistent secrets, that are stored and loaded on restarts",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "allow_unredacted_secrets",
        "value": "false",
        "description": "Allow printing unredacted secrets",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "allow_unsigned_extensions",
        "value": "true",
        "description": "Allow to load extensions with invalid or missing signatures",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "allowed_directories",
        "value": "[]",
        "description": "List of directories/prefixes that are ALWAYS allowed to be queried - even when enable_external_access is false",
        "input_type": "VARCHAR[]",
        "scope": "GLOBAL"
    },
    {
        "name": "allowed_paths",
        "value": "[]",
        "description": "List of files that are ALWAYS allowed to be queried - even when enable_external_access is false",
        "input_type": "VARCHAR[]",
        "scope": "GLOBAL"
    },
    {
        "name": "arrow_large_buffer_size",
        "value": "false",
        "description": "Whether Arrow buffers for strings, blobs, uuids and bits should be exported using large buffers",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "arrow_lossless_conversion",
        "value": "false",
        "description": "Whenever a DuckDB type does not have a clear native or canonical extension match in Arrow, export the types with a duckdb.type_name extension name.",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "arrow_output_list_view",
        "value": "false",
        "description": "Whether export to Arrow format should use ListView as the physical layout for LIST columns",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "autoinstall_extension_repository",
        "value": "",
        "description": "Overrides the custom endpoint for extension installation on autoloading",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "autoinstall_known_extensions",
        "value": "true",
        "description": "Whether known extensions are allowed to be automatically installed when a query depends on them",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "autoload_known_extensions",
        "value": "true",
        "description": "Whether known extensions are allowed to be automatically loaded when a query depends on them",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "catalog_error_max_schemas",
        "value": "100",
        "description": "The maximum number of schemas the system will scan for \"did you mean...\" style errors in the catalog",
        "input_type": "UBIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "checkpoint_threshold",
        "value": "16.0 MiB",
        "description": "The WAL size threshold at which to automatically trigger a checkpoint (e.g. 1GB)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "wal_autocheckpoint",
        "value": "16.0 MiB",
        "description": "The WAL size threshold at which to automatically trigger a checkpoint (e.g. 1GB)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "custom_extension_repository",
        "value": "",
        "description": "Overrides the custom endpoint for remote extension installation",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "custom_profiling_settings",
        "value": "{\"ROWS_RETURNED\": \"true\", \"LATENCY\": \"true\", \"RESULT_SET_SIZE\": \"true\", \"OPERATOR_TIMING\": \"true\", \"OPERATOR_ROWS_SCANNED\": \"true\", \"CUMULATIVE_ROWS_SCANNED\": \"true\", \"OPERATOR_CARDINALITY\": \"true\", \"OPERATOR_TYPE\": \"true\", \"OPERATOR_NAME\": \"true\", \"CUMULATIVE_CARDINALITY\": \"true\", \"EXTRA_INFO\": \"true\", \"CPU_TIME\": \"true\", \"BLOCKED_THREAD_TIME\": \"true\", \"QUERY_NAME\": \"true\"}",
        "description": "Accepts a JSON enabling custom metrics",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "custom_user_agent",
        "value": "",
        "description": "Metadata from DuckDB callers",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "debug_asof_iejoin",
        "value": "false",
        "description": "DEBUG SETTING: force use of IEJoin to implement AsOf joins",
        "input_type": "BOOLEAN",
        "scope": "LOCAL"
    },
    {
        "name": "debug_checkpoint_abort",
        "value": "none",
        "description": "DEBUG SETTING: trigger an abort while checkpointing for testing purposes",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "debug_force_external",
        "value": "false",
        "description": "DEBUG SETTING: force out-of-core computation for operators that support it, used for testing",
        "input_type": "BOOLEAN",
        "scope": "LOCAL"
    },
    {
        "name": "debug_force_no_cross_product",
        "value": "false",
        "description": "DEBUG SETTING: Force disable cross product generation when hyper graph isn't connected, used for testing",
        "input_type": "BOOLEAN",
        "scope": "LOCAL"
    },
    {
        "name": "debug_skip_checkpoint_on_commit",
        "value": "false",
        "description": "DEBUG SETTING: skip checkpointing on commit",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "debug_window_mode",
        "value": "window",
        "description": "DEBUG SETTING: switch window mode to use",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "default_block_size",
        "value": "262144",
        "description": "The default block size for new duckdb database files (new as-in, they do not yet exist).",
        "input_type": "UBIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "default_collation",
        "value": "",
        "description": "The collation setting used when none is specified",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "default_null_order",
        "value": "nulls_last",
        "description": "NULL ordering used when none is specified (NULLS_FIRST or NULLS_LAST)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "null_order",
        "value": "nulls_last",
        "description": "NULL ordering used when none is specified (NULLS_FIRST or NULLS_LAST)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "default_order",
        "value": "asc",
        "description": "The order type used when none is specified (ASC or DESC)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "default_secret_storage",
        "value": "local_file",
        "description": "Allows switching the default storage for secrets",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "disabled_compression_methods",
        "value": "",
        "description": "Disable a specific set of compression methods (comma separated)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "disabled_filesystems",
        "value": "",
        "description": "Disable specific file systems preventing access (e.g. LocalFileSystem)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "disabled_log_types",
        "value": "",
        "description": "Sets the list of disabled loggers",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "disabled_optimizers",
        "value": "",
        "description": "DEBUG SETTING: disable a specific set of optimizers (comma separated)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "duckdb_api",
        "value": "DuckDB.NET/1.2.1",
        "description": "DuckDB API surface",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "dynamic_or_filter_threshold",
        "value": "50",
        "description": "The maximum amount of OR filters we generate dynamically from a hash join",
        "input_type": "UBIGINT",
        "scope": "LOCAL"
    },
    {
        "name": "enable_external_access",
        "value": "true",
        "description": "Allow the database to access external state (through e.g. loading/installing modules, COPY TO/FROM, CSV readers, pandas replacement scans, etc)",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "enable_fsst_vectors",
        "value": "false",
        "description": "Allow scans on FSST compressed segments to emit compressed vectors to utilize late decompression",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "enable_http_logging",
        "value": "false",
        "description": "Enables HTTP logging",
        "input_type": "BOOLEAN",
        "scope": "LOCAL"
    },
    {
        "name": "enable_http_metadata_cache",
        "value": "false",
        "description": "Whether or not the global http metadata is used to cache HTTP metadata",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "enable_logging",
        "value": "0",
        "description": "Enables the logger",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "enable_macro_dependencies",
        "value": "false",
        "description": "Enable created MACROs to create dependencies on the referenced objects (such as tables)",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "enable_object_cache",
        "value": "NULL",
        "description": "[PLACEHOLDER] Legacy setting - does nothing",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "enable_profiling",
        "value": "NULL",
        "description": "Enables profiling, and sets the output format (JSON, QUERY_TREE, QUERY_TREE_OPTIMIZER)",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "enable_progress_bar",
        "value": "false",
        "description": "Enables the progress bar, printing progress to the terminal for long queries",
        "input_type": "BOOLEAN",
        "scope": "LOCAL"
    },
    {
        "name": "enable_progress_bar_print",
        "value": "true",
        "description": "Controls the printing of the progress bar, when 'enable_progress_bar' is true",
        "input_type": "BOOLEAN",
        "scope": "LOCAL"
    },
    {
        "name": "enable_view_dependencies",
        "value": "false",
        "description": "Enable created VIEWs to create dependencies on the referenced objects (such as tables)",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "enabled_log_types",
        "value": "",
        "description": "Sets the list of enabled loggers",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "errors_as_json",
        "value": "false",
        "description": "Output error messages as structured JSON instead of as a raw string",
        "input_type": "BOOLEAN",
        "scope": "LOCAL"
    },
    {
        "name": "explain_output",
        "value": "physical_only",
        "description": "Output of EXPLAIN statements (ALL, OPTIMIZED_ONLY, PHYSICAL_ONLY)",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "extension_directory",
        "value": "",
        "description": "Set the directory to store extensions in",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "external_threads",
        "value": "1",
        "description": "The number of external threads that work on DuckDB tasks.",
        "input_type": "UBIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "file_search_path",
        "value": "",
        "description": "A comma separated list of directories to search for input files",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "force_bitpacking_mode",
        "value": "auto",
        "description": "DEBUG SETTING: forces a specific bitpacking mode",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "force_compression",
        "value": "Auto",
        "description": "DEBUG SETTING: forces a specific compression method to be used",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "home_directory",
        "value": "",
        "description": "Sets the home directory used by the system",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "http_logging_output",
        "value": "",
        "description": "The file to which HTTP logging output should be saved, or empty to print to the terminal",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "http_proxy",
        "value": "",
        "description": "HTTP proxy host",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "http_proxy_password",
        "value": "",
        "description": "Password for HTTP proxy",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "http_proxy_username",
        "value": "",
        "description": "Username for HTTP proxy",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "ieee_floating_point_ops",
        "value": "true",
        "description": "Use IEE754-compliant floating point operations (returning NAN instead of errors/NULL).",
        "input_type": "BOOLEAN",
        "scope": "LOCAL"
    },
    {
        "name": "immediate_transaction_mode",
        "value": "false",
        "description": "Whether transactions should be started lazily when needed, or immediately when BEGIN TRANSACTION is called",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "index_scan_max_count",
        "value": "2048",
        "description": "The maximum index scan count sets a threshold for index scans. If fewer than MAX(index_scan_max_count, index_scan_percentage * total_row_count) rows match, we perform an index scan instead of a table scan.",
        "input_type": "UBIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "index_scan_percentage",
        "value": "0.001",
        "description": "The index scan percentage sets a threshold for index scans. If fewer than MAX(index_scan_max_count, index_scan_percentage * total_row_count) rows match, we perform an index scan instead of a table scan.",
        "input_type": "DOUBLE",
        "scope": "GLOBAL"
    },
    {
        "name": "integer_division",
        "value": "false",
        "description": "Whether or not the / operator defaults to integer division, or to floating point division",
        "input_type": "BOOLEAN",
        "scope": "LOCAL"
    },
    {
        "name": "late_materialization_max_rows",
        "value": "50",
        "description": "The maximum amount of rows in the LIMIT/SAMPLE for which we trigger late materialization",
        "input_type": "UBIGINT",
        "scope": "LOCAL"
    },
    {
        "name": "lock_configuration",
        "value": "false",
        "description": "Whether or not the configuration can be altered",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "log_query_path",
        "value": "NULL",
        "description": "Specifies the path to which queries should be logged (default: NULL, queries are not logged)",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "logging_level",
        "value": "INFO",
        "description": "The log level which will be recorded in the log",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "logging_mode",
        "value": "LEVEL_ONLY",
        "description": "Enables the logger",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "logging_storage",
        "value": "memory",
        "description": "Set the logging storage (memory/stdout/file)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "max_expression_depth",
        "value": "1000",
        "description": "The maximum expression depth limit in the parser. WARNING: increasing this setting and using very deep expressions might lead to stack overflow errors.",
        "input_type": "UBIGINT",
        "scope": "LOCAL"
    },
    {
        "name": "max_memory",
        "value": "6.1 GiB",
        "description": "The maximum memory of the system (e.g. 1GB)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "memory_limit",
        "value": "6.1 GiB",
        "description": "The maximum memory of the system (e.g. 1GB)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "max_temp_directory_size",
        "value": "90% of available disk space",
        "description": "The maximum amount of data stored inside the 'temp_directory' (when set) (e.g. 1GB)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "max_vacuum_tasks",
        "value": "100",
        "description": "The maximum vacuum tasks to schedule during a checkpoint.",
        "input_type": "UBIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "merge_join_threshold",
        "value": "1000",
        "description": "The number of rows we need on either table to choose a merge join",
        "input_type": "UBIGINT",
        "scope": "LOCAL"
    },
    {
        "name": "nested_loop_join_threshold",
        "value": "5",
        "description": "The number of rows we need on either table to choose a nested loop join",
        "input_type": "UBIGINT",
        "scope": "LOCAL"
    },
    {
        "name": "old_implicit_casting",
        "value": "false",
        "description": "Allow implicit casting to/from VARCHAR",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "order_by_non_integer_literal",
        "value": "false",
        "description": "Allow ordering by non-integer literals - ordering by such literals has no effect.",
        "input_type": "BOOLEAN",
        "scope": "LOCAL"
    },
    {
        "name": "ordered_aggregate_threshold",
        "value": "262144",
        "description": "The number of rows to accumulate before sorting, used for tuning",
        "input_type": "UBIGINT",
        "scope": "LOCAL"
    },
    {
        "name": "partitioned_write_flush_threshold",
        "value": "524288",
        "description": "The threshold in number of rows after which we flush a thread state when writing using PARTITION_BY",
        "input_type": "UBIGINT",
        "scope": "LOCAL"
    },
    {
        "name": "partitioned_write_max_open_files",
        "value": "100",
        "description": "The maximum amount of files the system can keep open before flushing to disk when writing using PARTITION_BY",
        "input_type": "UBIGINT",
        "scope": "LOCAL"
    },
    {
        "name": "password",
        "value": "NULL",
        "description": "The password to use. Ignored for legacy compatibility.",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "perfect_ht_threshold",
        "value": "12",
        "description": "Threshold in bytes for when to use a perfect hash table",
        "input_type": "UBIGINT",
        "scope": "LOCAL"
    },
    {
        "name": "pivot_filter_threshold",
        "value": "20",
        "description": "The threshold to switch from using filtered aggregates to LIST with a dedicated pivot operator",
        "input_type": "UBIGINT",
        "scope": "LOCAL"
    },
    {
        "name": "pivot_limit",
        "value": "100000",
        "description": "The maximum number of pivot columns in a pivot statement",
        "input_type": "UBIGINT",
        "scope": "LOCAL"
    },
    {
        "name": "prefer_range_joins",
        "value": "false",
        "description": "Force use of range joins with mixed predicates",
        "input_type": "BOOLEAN",
        "scope": "LOCAL"
    },
    {
        "name": "preserve_identifier_case",
        "value": "true",
        "description": "Whether or not to preserve the identifier case, instead of always lowercasing all non-quoted identifiers",
        "input_type": "BOOLEAN",
        "scope": "LOCAL"
    },
    {
        "name": "preserve_insertion_order",
        "value": "true",
        "description": "Whether or not to preserve insertion order. If set to false the system is allowed to re-order any results that do not contain ORDER BY clauses.",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "produce_arrow_string_view",
        "value": "false",
        "description": "Whether strings should be produced by DuckDB in Utf8View format instead of Utf8",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "profile_output",
        "value": "",
        "description": "The file to which profile output should be saved, or empty to print to the terminal",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "profiling_output",
        "value": "",
        "description": "The file to which profile output should be saved, or empty to print to the terminal",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "profiling_mode",
        "value": "NULL",
        "description": "The profiling mode (STANDARD or DETAILED)",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "progress_bar_time",
        "value": "2000",
        "description": "Sets the time (in milliseconds) how long a query needs to take before we start printing a progress bar",
        "input_type": "BIGINT",
        "scope": "LOCAL"
    },
    {
        "name": "scalar_subquery_error_on_multiple_rows",
        "value": "true",
        "description": "When a scalar subquery returns multiple rows - return a random row instead of returning an error.",
        "input_type": "BOOLEAN",
        "scope": "LOCAL"
    },
    {
        "name": "schema",
        "value": "main",
        "description": "Sets the default search schema. Equivalent to setting search_path to a single value.",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "search_path",
        "value": "",
        "description": "Sets the default catalog search path as a comma-separated list of values",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "secret_directory",
        "value": "/home/.duckdb/stored_secrets",
        "description": "Set the directory to which persistent secrets are stored",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "storage_compatibility_version",
        "value": "v0.10.2",
        "description": "Serialize on checkpoint with compatibility for a given duckdb version",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "streaming_buffer_size",
        "value": "976.5 KiB",
        "description": "The maximum memory to buffer between fetching from a streaming result (e.g. 1GB)",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "temp_directory",
        "value": ".tmp",
        "description": "Set the directory to which to write temp files",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "threads",
        "value": "2",
        "description": "The number of total threads used by the system.",
        "input_type": "BIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "worker_threads",
        "value": "2",
        "description": "The number of total threads used by the system.",
        "input_type": "BIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "username",
        "value": "NULL",
        "description": "The username to use. Ignored for legacy compatibility.",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "user",
        "value": "NULL",
        "description": "The username to use. Ignored for legacy compatibility.",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "zstd_min_string_length",
        "value": "4096",
        "description": "The (average) length at which to enable ZSTD compression, defaults to 4096",
        "input_type": "UBIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "azure_http_proxy",
        "value": "",
        "description": "Proxy to use when login & performing request to azure. By default it will use the HTTP_PROXY environment variable if set.",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "azure_read_transfer_chunk_size",
        "value": "1048576",
        "description": "Maximum size in bytes that the Azure client will read in a single request. It is recommended that this is a factor of azure_read_buffer_size.",
        "input_type": "BIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "azure_read_transfer_concurrency",
        "value": "5",
        "description": "Maximum number of threads the Azure client can use for a single parallel read. If azure_read_transfer_chunk_size is less than azure_read_buffer_size then setting this > 1 will allow the Azure client to do concurrent requests to fill the buffer.",
        "input_type": "INTEGER",
        "scope": "GLOBAL"
    },
    {
        "name": "azure_read_buffer_size",
        "value": "1048576",
        "description": "Size of the read buffer.  It is recommended that this is evenly divisible by azure_read_transfer_chunk_size.",
        "input_type": "UBIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "azure_http_stats",
        "value": "0",
        "description": "Include http info from the Azure Storage in the explain analyze statement.",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "azure_proxy_user_name",
        "value": "",
        "description": "Http proxy user name if needed.",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "azure_endpoint",
        "value": "blob.core.windows.net",
        "description": "Override the azure endpoint for when the Azure credential providers are used.",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "force_download",
        "value": "false",
        "description": "Forces upfront download of file",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "parquet_metadata_cache",
        "value": "false",
        "description": "Cache Parquet metadata - useful when reading the same files multiple times",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "http_retry_wait_ms",
        "value": "100",
        "description": "Time between retries",
        "input_type": "UBIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "s3_url_style",
        "value": "vhost",
        "description": "S3 URL style",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "s3_access_key_id",
        "value": "",
        "description": "S3 Access Key ID",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "s3_endpoint",
        "value": "",
        "description": "S3 Endpoint",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "enable_geoparquet_conversion",
        "value": "true",
        "description": "Attempt to decode/encode geometry data in/as GeoParquet files if the spatial extension is present.",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "http_retries",
        "value": "3",
        "description": "HTTP retries on I/O error",
        "input_type": "UBIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "TimeZone",
        "value": "Etc/UTC",
        "description": "The current time zone",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "azure_transport_option_type",
        "value": "curl",
        "description": "Underlying adapter to use with the Azure SDK. Read more about the adapter at https://github.com/Azure/azure-sdk-for-cpp/blob/main/doc/HttpTransportAdapter.md. Valid values are: default, curl",
        "input_type": "VARCHAR",
        "scope": "LOCAL"
    },
    {
        "name": "ca_cert_file",
        "value": "",
        "description": "Path to a custom certificate file for self-signed certificates.",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "http_retry_backoff",
        "value": "4",
        "description": "Backoff factor for exponentially increasing retry wait time",
        "input_type": "FLOAT",
        "scope": "GLOBAL"
    },
    {
        "name": "s3_uploader_thread_limit",
        "value": "50",
        "description": "S3 Uploader global thread limit",
        "input_type": "UBIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "prefetch_all_parquet_files",
        "value": "false",
        "description": "Use the prefetching mechanism for all types of parquet files",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "azure_context_caching",
        "value": "1",
        "description": "Enable/disable the caching of some context when performing queries. This cache is by default enable, and will for a given connection keep a local context when performing a query. If you suspect that the caching is causing some side effect you can try to disable it by setting this option to false.",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "azure_account_name",
        "value": "",
        "description": "Azure account name, when set, the extension will attempt to automatically detect credentials",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "s3_uploader_max_filesize",
        "value": "800GB",
        "description": "S3 Uploader max filesize (between 50GB and 5TB)",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "disable_parquet_prefetching",
        "value": "false",
        "description": "Disable the prefetching mechanism in Parquet",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "http_timeout",
        "value": "30",
        "description": "HTTP timeout read/write/connection/retry (in seconds)",
        "input_type": "UBIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "s3_use_ssl",
        "value": "true",
        "description": "S3 use SSL",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "binary_as_string",
        "value": "",
        "description": "In Parquet files, interpret binary data as a string.",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "enable_server_cert_verification",
        "value": "false",
        "description": "Enable server side certificate verification.",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "azure_proxy_password",
        "value": "",
        "description": "Http proxy password if needed.",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "hf_max_per_page",
        "value": "0",
        "description": "Debug option to limit number of items returned in list requests",
        "input_type": "UBIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "Calendar",
        "value": "gregorian",
        "description": "The current calendar",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "s3_uploader_max_parts_per_file",
        "value": "10000",
        "description": "S3 Uploader max parts per file (between 1 and 10000)",
        "input_type": "UBIGINT",
        "scope": "GLOBAL"
    },
    {
        "name": "s3_region",
        "value": "us-east-1",
        "description": "S3 Region",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "s3_session_token",
        "value": "",
        "description": "S3 Session Token",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "azure_credential_chain",
        "value": "",
        "description": "Ordered list of Azure credential providers, in string format separated by ';'. E.g. 'cli;workload_identity;managed_identity;env'",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "s3_url_compatibility_mode",
        "value": "false",
        "description": "Disable Globs and Query Parameters on S3 URLs",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "http_keep_alive",
        "value": "true",
        "description": "Keep alive connections. Setting this to false can help when running into connection failures",
        "input_type": "BOOLEAN",
        "scope": "GLOBAL"
    },
    {
        "name": "s3_secret_access_key",
        "value": "",
        "description": "S3 Access Key",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    },
    {
        "name": "azure_storage_connection_string",
        "value": "",
        "description": "Azure connection string, used for authenticating and configuring azure requests",
        "input_type": "VARCHAR",
        "scope": "GLOBAL"
    }
]
